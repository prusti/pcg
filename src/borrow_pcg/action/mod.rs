//! Actions applied to the Borrow PCG, as generated by the PCG analysis.

use super::borrow_pcg_edge::BorrowPcgEdge;
use crate::action::BorrowPcgAction;
use crate::borrow_checker::BorrowCheckerInterface;
use crate::borrow_pcg::edge_data::{LabelEdgePlaces, LabelPlacePredicate};
use crate::borrow_pcg::has_pcs_elem::{LabelRegionProjectionPredicate, PlaceLabeller};
use crate::borrow_pcg::region_projection::{RegionProjection, RegionProjectionLabel};
use crate::free_pcs::CapabilityKind;
use crate::utils::display::DisplayWithCompilerCtxt;
use crate::utils::maybe_old::MaybeOldPlace;
use crate::utils::{CompilerCtxt, Place, SnapshotLocation};
use crate::{RestoreCapability, Weaken};

pub mod actions;

impl<'tcx> BorrowPcgAction<'tcx> {
    pub(crate) fn restore_capability(
        place: Place<'tcx>,
        capability: CapabilityKind,
        debug_context: impl Into<String>,
    ) -> Self {
        BorrowPcgAction {
            kind: BorrowPcgActionKind::Restore(RestoreCapability::new(place, capability)),
            debug_context: Some(debug_context.into()),
        }
    }

    pub(crate) fn weaken(
        place: Place<'tcx>,
        from: CapabilityKind,
        to: Option<CapabilityKind>,
        context: impl Into<String>,
        ctxt: CompilerCtxt<'_, 'tcx>,
    ) -> Self {
        BorrowPcgAction {
            kind: BorrowPcgActionKind::Weaken(Weaken::new(place, from, to, ctxt)),
            debug_context: Some(context.into()),
        }
    }

    pub(crate) fn remove_edge(edge: BorrowPcgEdge<'tcx>, context: impl Into<String>) -> Self {
        BorrowPcgAction {
            kind: BorrowPcgActionKind::RemoveEdge(edge),
            debug_context: Some(context.into()),
        }
    }

    pub(crate) fn add_edge(
        edge: BorrowPcgEdge<'tcx>,
        context: impl Into<String>,
        _ctxt: CompilerCtxt<'_, 'tcx>,
    ) -> Self {
        BorrowPcgAction {
            kind: BorrowPcgActionKind::AddEdge { edge },
            debug_context: Some(context.into()),
        }
    }

    pub(crate) fn remove_region_projection_label(
        projection: RegionProjection<'tcx, MaybeOldPlace<'tcx>>,
        context: impl Into<String>,
    ) -> Self {
        BorrowPcgAction {
            kind: BorrowPcgActionKind::LabelRegionProjection(
                LabelRegionProjectionPredicate::Equals(projection),
                None,
            ),
            debug_context: Some(context.into()),
        }
    }

    pub(crate) fn label_region_projection(
        predicate: LabelRegionProjectionPredicate<'tcx>,
        label: Option<RegionProjectionLabel>,
        context: impl Into<String>,
    ) -> Self {
        BorrowPcgAction {
            kind: BorrowPcgActionKind::LabelRegionProjection(predicate, label),
            debug_context: Some(context.into()),
        }
    }

    pub(crate) fn make_place_old(
        place: Place<'tcx>,
        location: SnapshotLocation,
        reason: MakePlaceOldReason,
    ) -> Self {
        BorrowPcgAction {
            kind: BorrowPcgActionKind::MakePlaceOld(MakePlaceOldAction {
                place,
                location,
                reason,
            }),
            debug_context: None,
        }
    }
}

#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum MakePlaceOldReason {
    StorageDead,
    MoveOut,
    ReAssign,
    LabelSharedDerefProjections,
    Collapse,
}

impl MakePlaceOldReason {
    pub(crate) fn apply_to_edge<'tcx>(
        self,
        place: Place<'tcx>,
        edge: &mut BorrowPcgEdge<'tcx>,
        labeller: &impl PlaceLabeller<'tcx>,
        ctxt: CompilerCtxt<'_, 'tcx>,
    ) -> bool {
        let predicate = match self {
            MakePlaceOldReason::ReAssign => {
                LabelPlacePredicate::PrefixWithoutIndirectionOrPostfix(place)
            }
            MakePlaceOldReason::StorageDead | MakePlaceOldReason::MoveOut => {
                LabelPlacePredicate::PrefixWithoutIndirectionOrPostfix(place)
            }
            MakePlaceOldReason::Collapse => LabelPlacePredicate::Exact(place),
            MakePlaceOldReason::LabelSharedDerefProjections => {
                LabelPlacePredicate::StrictPostfix(place)
            }
        };
        let mut changed = edge.label_blocked_by_places(&predicate, labeller, ctxt);
        changed |= edge.label_blocked_places(&predicate, labeller, ctxt);
        changed
    }
}

#[derive(Clone, Debug, PartialEq, Eq)]
pub struct MakePlaceOldAction<'tcx> {
    pub(crate) place: Place<'tcx>,
    pub(crate) location: SnapshotLocation,
    pub(crate) reason: MakePlaceOldReason,
}

impl<'tcx, 'a> DisplayWithCompilerCtxt<'tcx, &'a dyn BorrowCheckerInterface<'tcx>>
    for MakePlaceOldAction<'tcx>
{
    fn to_short_string(
        &self,
        ctxt: CompilerCtxt<'_, 'tcx, &'a dyn BorrowCheckerInterface<'tcx>>,
    ) -> String {
        format!(
            "Make {} an old place ({:?})",
            self.place.to_short_string(ctxt),
            self.reason
        )
    }
}

#[derive(Clone, Debug, PartialEq, Eq)]
pub enum BorrowPcgActionKind<'tcx> {
    LabelRegionProjection(
        LabelRegionProjectionPredicate<'tcx>,
        Option<RegionProjectionLabel>,
    ),
    Weaken(Weaken<'tcx>),
    Restore(RestoreCapability<'tcx>),
    MakePlaceOld(MakePlaceOldAction<'tcx>),
    RemoveEdge(BorrowPcgEdge<'tcx>),
    AddEdge {
        edge: BorrowPcgEdge<'tcx>,
    },
}

impl<'tcx, 'a> DisplayWithCompilerCtxt<'tcx, &'a dyn BorrowCheckerInterface<'tcx>>
    for BorrowPcgActionKind<'tcx>
{
    fn to_short_string(
        &self,
        ctxt: CompilerCtxt<'_, 'tcx, &'a dyn BorrowCheckerInterface<'tcx>>,
    ) -> String {
        match self {
            BorrowPcgActionKind::LabelRegionProjection(rp, label) => {
                format!(
                    "Label Region Projection: {} with {:?}",
                    rp.to_short_string(ctxt),
                    label
                )
            }
            BorrowPcgActionKind::Weaken(weaken) => weaken.debug_line(ctxt),
            BorrowPcgActionKind::Restore(restore_capability) => restore_capability.debug_line(ctxt),
            BorrowPcgActionKind::MakePlaceOld(action) => action.to_short_string(ctxt),
            BorrowPcgActionKind::RemoveEdge(borrow_pcgedge) => {
                format!("Remove Edge {}", borrow_pcgedge.to_short_string(ctxt))
            }
            BorrowPcgActionKind::AddEdge { edge } => {
                format!("Add Edge: {}", edge.to_short_string(ctxt),)
            }
        }
    }
}
