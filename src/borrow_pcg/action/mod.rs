//! Actions applied to the Borrow PCG, as generated by the PCG analysis.
use tracing::instrument;

use super::borrow_pcg_edge::BorrowPcgEdge;
use super::edge::kind::BorrowPcgEdgeKind;
use super::state::BorrowsState;
use crate::action::BorrowPcgAction;
use crate::borrow_checker::BorrowCheckerInterface;
use crate::borrow_pcg::borrow_pcg_edge::LocalNode;
use crate::borrow_pcg::borrow_pcg_expansion::BorrowPcgExpansion;
use crate::borrow_pcg::edge_data::{EdgeData, EdgePredicate, LabelEdgePlaces, LabelPlacePredicate};
use crate::borrow_pcg::graph::BorrowsGraph;
use crate::borrow_pcg::has_pcs_elem::{LabelRegionProjectionPredicate, PlaceLabeller};
use crate::borrow_pcg::region_projection::{RegionProjection, RegionProjectionLabel};
use crate::free_pcs::CapabilityKind;
use crate::pcg::place_capabilities::{BlockType, PlaceCapabilities, PlaceCapabilitiesInterface};
use crate::pcg::PcgError;
use crate::rustc_interface::middle::mir::Location;
use crate::utils::display::DisplayWithCompilerCtxt;
use crate::utils::maybe_old::MaybeOldPlace;
use crate::utils::redirect::RedirectResult;
use crate::utils::{CompilerCtxt, HasPlace, Place, SnapshotLocation};
use crate::{pcg_validity_assert, validity_checks_enabled, RestoreCapability, Weaken};

pub mod actions;

impl<'tcx> BorrowPcgAction<'tcx> {
    pub(crate) fn restore_capability(
        place: Place<'tcx>,
        capability: CapabilityKind,
        debug_context: impl Into<String>,
    ) -> Self {
        BorrowPcgAction {
            kind: BorrowPcgActionKind::Restore(RestoreCapability::new(place, capability)),
            debug_context: Some(debug_context.into()),
        }
    }

    pub(crate) fn weaken(
        place: Place<'tcx>,
        from: CapabilityKind,
        to: Option<CapabilityKind>,
        context: impl Into<String>,
        ctxt: CompilerCtxt<'_, 'tcx>,
    ) -> Self {
        BorrowPcgAction {
            kind: BorrowPcgActionKind::Weaken(Weaken::new(place, from, to, ctxt)),
            debug_context: Some(context.into()),
        }
    }

    pub(crate) fn set_latest(
        place: Place<'tcx>,
        location: SnapshotLocation,
        context: impl Into<String>,
    ) -> Self {
        BorrowPcgAction {
            kind: BorrowPcgActionKind::SetLatest(place, location),
            debug_context: Some(context.into()),
        }
    }

    pub(crate) fn remove_edge(edge: BorrowPcgEdge<'tcx>, context: impl Into<String>) -> Self {
        BorrowPcgAction {
            kind: BorrowPcgActionKind::RemoveEdge(edge),
            debug_context: Some(context.into()),
        }
    }

    #[allow(unused)]
    pub(crate) fn redirect_edge(
        edge: BorrowPcgEdgeKind<'tcx>,
        from: LocalNode<'tcx>,
        to: LocalNode<'tcx>,
        context: impl Into<String>,
    ) -> Self {
        BorrowPcgAction {
            kind: BorrowPcgActionKind::RedirectEdge { edge, from, to },
            debug_context: Some(context.into()),
        }
    }

    pub(crate) fn add_edge(
        edge: BorrowPcgEdge<'tcx>,
        context: impl Into<String>,
        ctxt: CompilerCtxt<'_, 'tcx>,
    ) -> Self {
        BorrowPcgAction {
            kind: BorrowPcgActionKind::AddEdge { edge },
            debug_context: Some(context.into()),
        }
    }

    pub(crate) fn remove_region_projection_label(
        projection: RegionProjection<'tcx, MaybeOldPlace<'tcx>>,
        context: impl Into<String>,
    ) -> Self {
        BorrowPcgAction {
            kind: BorrowPcgActionKind::LabelRegionProjection(
                LabelRegionProjectionPredicate::Equals(projection),
                None,
            ),
            debug_context: Some(context.into()),
        }
    }

    pub(crate) fn label_region_projection(
        predicate: LabelRegionProjectionPredicate<'tcx>,
        label: Option<RegionProjectionLabel>,
        context: impl Into<String>,
    ) -> Self {
        BorrowPcgAction {
            kind: BorrowPcgActionKind::LabelRegionProjection(predicate, label),
            debug_context: Some(context.into()),
        }
    }

    pub(crate) fn make_place_old(place: Place<'tcx>, reason: MakePlaceOldReason) -> Self {
        BorrowPcgAction {
            kind: BorrowPcgActionKind::MakePlaceOld(place, reason),
            debug_context: None,
        }
    }
}

#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum MakePlaceOldReason {
    StorageDead,
    MoveOut,
    ReAssign,
    LabelSharedDerefProjections,
    Collapse,
}

impl MakePlaceOldReason {
    pub(crate) fn apply_to_edge<'tcx>(
        self,
        place: Place<'tcx>,
        edge: &mut BorrowPcgEdge<'tcx>,
        labeller: &impl PlaceLabeller<'tcx>,
        ctxt: CompilerCtxt<'_, 'tcx>,
    ) -> bool {
        let predicate = match self {
            MakePlaceOldReason::ReAssign => {
                    LabelPlacePredicate::PrefixWithoutIndirectionOrPostfix(place)
            }
            MakePlaceOldReason::StorageDead | MakePlaceOldReason::MoveOut => {
                LabelPlacePredicate::PrefixWithoutIndirectionOrPostfix(place)
            }
            MakePlaceOldReason::Collapse => LabelPlacePredicate::Exact(place),
            MakePlaceOldReason::LabelSharedDerefProjections => {
                LabelPlacePredicate::LabelSharedDerefProjections(place)
            }
        };
        let mut changed = edge.label_blocked_by_places(&predicate, labeller, ctxt);
        changed |= edge.label_blocked_places(&predicate, labeller, ctxt);
        changed
    }
}

#[derive(Clone, Debug, PartialEq, Eq)]
pub enum BorrowPcgActionKind<'tcx> {
    RedirectEdge {
        edge: BorrowPcgEdgeKind<'tcx>,
        from: LocalNode<'tcx>,
        to: LocalNode<'tcx>,
    },
    LabelRegionProjection(
        LabelRegionProjectionPredicate<'tcx>,
        Option<RegionProjectionLabel>,
    ),
    Weaken(Weaken<'tcx>),
    Restore(RestoreCapability<'tcx>),
    MakePlaceOld(Place<'tcx>, MakePlaceOldReason),
    SetLatest(Place<'tcx>, SnapshotLocation),
    RemoveEdge(BorrowPcgEdge<'tcx>),
    AddEdge {
        edge: BorrowPcgEdge<'tcx>,
    },
}

impl<'tcx, 'a> DisplayWithCompilerCtxt<'tcx, &'a dyn BorrowCheckerInterface<'tcx>>
    for BorrowPcgActionKind<'tcx>
{
    fn to_short_string(
        &self,
        ctxt: CompilerCtxt<'_, 'tcx, &'a dyn BorrowCheckerInterface<'tcx>>,
    ) -> String {
        match self {
            BorrowPcgActionKind::RedirectEdge { edge, from, to } => {
                format!(
                    "Redirect Edge: {} from {} to {}",
                    edge.to_short_string(ctxt),
                    from.to_short_string(ctxt),
                    to.to_short_string(ctxt)
                )
            }
            BorrowPcgActionKind::LabelRegionProjection(rp, label) => {
                format!(
                    "Label Region Projection: {} with {:?}",
                    rp.to_short_string(ctxt),
                    label
                )
            }
            BorrowPcgActionKind::Weaken(weaken) => weaken.debug_line(ctxt),
            BorrowPcgActionKind::Restore(restore_capability) => restore_capability.debug_line(ctxt),
            BorrowPcgActionKind::MakePlaceOld(predicate, reason) => {
                format!(
                    "Make {} an old place ({:?})",
                    predicate.to_short_string(ctxt),
                    reason
                )
            }
            BorrowPcgActionKind::SetLatest(place, location) => format!(
                "Set Latest of {} to {:?}",
                place.to_short_string(ctxt),
                location
            ),
            BorrowPcgActionKind::RemoveEdge(borrow_pcgedge) => {
                format!("Remove Edge {}", borrow_pcgedge.to_short_string(ctxt))
            }
            BorrowPcgActionKind::AddEdge { edge } => {
                format!("Add Edge: {}", edge.to_short_string(ctxt),)
            }
        }
    }
}

impl<'tcx> BorrowsGraph<'tcx> {
    #[must_use]
    fn redirect_edge(
        &mut self,
        mut edge: BorrowPcgEdgeKind<'tcx>,
        from: LocalNode<'tcx>,
        to: LocalNode<'tcx>,
        ctxt: CompilerCtxt<'_, 'tcx>,
    ) -> bool {
        let conditions = self.remove(&edge).unwrap();
        if edge.redirect(from, to, ctxt) != RedirectResult::SelfRedirect {
            self.insert(BorrowPcgEdge::new(edge, conditions), ctxt);
        }
        true
    }
}

impl<'tcx> BorrowsState<'tcx> {
    #[instrument(skip(self, action, capabilities, ctxt))]
    pub(crate) fn apply_action(
        &mut self,
        action: BorrowPcgAction<'tcx>,
        capabilities: &mut PlaceCapabilities<'tcx>,
        ctxt: CompilerCtxt<'_, 'tcx>,
    ) -> Result<bool, PcgError> {
        let result = match action.kind {
            BorrowPcgActionKind::RedirectEdge { edge, from, to } => {
                self.graph.redirect_edge(edge, from, to, ctxt)
            }
            BorrowPcgActionKind::Restore(restore) => {
                let restore_place = restore.place();
                if let Some(cap) = capabilities.get(restore_place) {
                    assert!(cap < restore.capability(), "Current capability {:?} is not less than the capability to restore to {:?}", cap, restore.capability());
                }
                if !capabilities.insert(restore_place, restore.capability(), ctxt) {
                    panic!("Capability should have been updated")
                }
                true
            }
            BorrowPcgActionKind::Weaken(weaken) => {
                let weaken_place = weaken.place();
                assert_eq!(capabilities.get(weaken_place), Some(weaken.from));
                match weaken.to {
                    Some(to) => {
                        capabilities.insert(weaken_place, to, ctxt);
                    }
                    None => {
                        assert!(capabilities.remove(weaken_place, ctxt).is_some());
                    }
                }
                true
            }
            BorrowPcgActionKind::MakePlaceOld(place, reason) => {
                self.make_place_old(place, reason, ctxt)
            }
            BorrowPcgActionKind::SetLatest(place, location) => {
                self.set_latest(place, location, ctxt)
            }
            BorrowPcgActionKind::RemoveEdge(edge) => self.remove(&edge, capabilities, ctxt),
            BorrowPcgActionKind::AddEdge { edge } => self.graph.insert(edge, ctxt),
            BorrowPcgActionKind::LabelRegionProjection(rp, label) => {
                self.label_region_projection(&rp, label, ctxt)
            }
        };
        Ok(result)
    }

    fn make_place_old(
        &mut self,
        place: Place<'tcx>,
        reason: MakePlaceOldReason,
        ctxt: CompilerCtxt<'_, 'tcx>,
    ) -> bool {
        self.graph.make_place_old(place, reason, &self.latest, ctxt)
    }

    fn label_region_projection(
        &mut self,
        predicate: &LabelRegionProjectionPredicate<'tcx>,
        label: Option<RegionProjectionLabel>,
        ctxt: CompilerCtxt<'_, 'tcx>,
    ) -> bool {
        self.graph.label_region_projection(predicate, label, ctxt)
    }

    #[must_use]
    fn set_latest<T: Into<SnapshotLocation>>(
        &mut self,
        place: Place<'tcx>,
        location: T,
        ctxt: CompilerCtxt<'_, 'tcx>,
    ) -> bool {
        let location = location.into();
        self.latest.insert(place, location, ctxt)
    }
}
