// This file has been generated by Specta. DO NOT EDIT.

export type MirNode = { id: string; block: number; stmts: MirStmt[]; terminator: MirStmt }

export type MirGraph = { nodes: MirNode[]; edges: MirEdge[] }

export type EvalStmtPhase = "pre_operands" | "post_operands" | "pre_main" | "post_main"

export type MirStmt = { stmt: string; span: MirStmtSpan; loans_invalidated_start: string[]; loans_invalidated_mid: string[]; borrows_in_scope_start: string[]; borrows_in_scope_mid: string[] }

export type SourcePos = { line: number; column: number }

export type PcgStmtVisualizationData = { actions: EvalStmtData<ActionKindWithDebugCtxt<string>[]> }

export type MirEdge = { source: string; target: string; label: string }

export type FunctionMetadata = { name: string; source: string; start: SourcePos }

export type PcgSuccessorVisualizationData = { actions: ActionKindWithDebugCtxt<string>[] }

/**
 * A pair of a PCG action and a debug context (indicating the source of the
 * action).
 */
export type ActionKindWithDebugCtxt<T> = { kind: T; debug_context: string | null }

export type MirStmtSpan = { low: SourcePos; high: SourcePos }

export type StmtGraphs<PhaseKey> = { at_phase: ([PhaseKey, string])[]; actions: EvalStmtData<string[]> }

export type EvalStmtData<T> = { pre_operands: T; post_operands: T; pre_main: T; post_main: T }

